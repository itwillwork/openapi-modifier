{
    "openapi": "3.0.4",
    "servers": [
        {
            "url": "/api/v3"
        }
    ],
    "tags": [
        {
            "description": "Everything about your Pets",
            "name": "pet",
            "externalDocs": {
                "description": "Find out more",
                "url": "https://swagger.io"
            }
        },
        {
            "description": "Access to Petstore orders",
            "name": "store",
            "externalDocs": {
                "description": "Find out more about our store",
                "url": "https://swagger.io"
            }
        },
        {
            "description": "Operations about user",
            "name": "user"
        }
    ],
    "components": {
        "requestBodies": {
            "Pet": {
                "description": "Pet object that needs to be added to the store",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    }
                }
            },
            "UserArray": {
                "description": "List of user object",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                }
            }
        },
        "schemas": {
            "ApiResponse": {
                "type": "object",
                "properties": {
                    "code": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "##default"
                }
            },
            "Category": {
                "type": "object",
                "properties": {
                    "id": {
                        "example": 1,
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "example": "Dogs",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "category"
                }
            },
            "Order": {
                "type": "object",
                "properties": {
                    "complete": {
                        "type": "boolean"
                    },
                    "id": {
                        "example": 10,
                        "format": "int64",
                        "type": "integer"
                    },
                    "petId": {
                        "example": 198772,
                        "format": "int64",
                        "type": "integer"
                    },
                    "quantity": {
                        "example": 7,
                        "format": "int32",
                        "type": "integer"
                    },
                    "shipDate": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "status": {
                        "description": "Order Status",
                        "enum": [
                            "placed",
                            "approved",
                            "delivered"
                        ],
                        "example": "approved",
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "order"
                }
            },
            "Pet": {
                "required": [
                    "name",
                    "photoUrls"
                ],
                "type": "object",
                "properties": {
                    "category": {
                        "$ref": "#/components/schemas/Category"
                    },
                    "id": {
                        "example": 10,
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "example": "doggie",
                        "type": "string"
                    },
                    "photoUrls": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "xml": {
                                "name": "photoUrl"
                            }
                        },
                        "xml": {
                            "wrapped": true
                        }
                    },
                    "status": {
                        "description": "pet status in the store",
                        "enum": [
                            "available",
                            "pending",
                            "sold"
                        ],
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        },
                        "xml": {
                            "wrapped": true
                        }
                    }
                },
                "xml": {
                    "name": "pet"
                }
            },
            "Tag": {
                "type": "object",
                "properties": {
                    "id": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "tag"
                }
            },
            "User": {
                "type": "object",
                "properties": {
                    "email": {
                        "example": "john@email.com",
                        "type": "string"
                    },
                    "firstName": {
                        "example": "John",
                        "type": "string"
                    },
                    "id": {
                        "example": 10,
                        "format": "int64",
                        "type": "integer"
                    },
                    "lastName": {
                        "example": "James",
                        "type": "string"
                    },
                    "password": {
                        "example": "12345",
                        "type": "string"
                    },
                    "phone": {
                        "example": "12345",
                        "type": "string"
                    },
                    "username": {
                        "example": "theUser",
                        "type": "string"
                    },
                    "userStatus": {
                        "description": "User Status",
                        "example": 1,
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "xml": {
                    "name": "user"
                }
            }
        },
        "securitySchemes": {
            "api_key": {
                "in": "header",
                "name": "api_key",
                "type": "apiKey"
            },
            "petstore_auth": {
                "type": "oauth2",
                "flows": {
                    "implicit": {
                        "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
                        "scopes": {
                            "read:pets": "read your pets",
                            "write:pets": "modify pets in your account"
                        }
                    }
                }
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "https://swagger.io"
    },
    "info": {
        "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
        "termsOfService": "https://swagger.io/terms/",
        "title": "Swagger Petstore - OpenAPI 3.0",
        "version": "1.0.26",
        "contact": {
            "email": "apiteam@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "paths": {
        "/pet": {
            "post": {
                "description": "Add a new pet to the store.",
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Add a new pet to the store.",
                "tags": [
                    "pet"
                ],
                "requestBody": {
                    "description": "Create a new pet in the store",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Validation exception"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            },
            "put": {
                "description": "Update an existing pet by Id.",
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Update an existing pet.",
                "tags": [
                    "pet"
                ],
                "requestBody": {
                    "description": "Update an existent pet in the store",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Pet"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "422": {
                        "description": "Validation exception"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/pet/{petId}": {
            "delete": {
                "description": "Delete a pet.",
                "parameters": [
                    {
                        "description": "",
                        "in": "header",
                        "name": "api_key",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pet id to delete",
                        "in": "path",
                        "name": "petId",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Deletes a pet.",
                "tags": [
                    "pet"
                ],
                "responses": {
                    "200": {
                        "description": "Pet deleted"
                    },
                    "400": {
                        "description": "Invalid pet value"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            },
            "get": {
                "description": "Returns a single pet.",
                "parameters": [
                    {
                        "description": "ID of pet to return",
                        "in": "path",
                        "name": "petId",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "security": [
                    {
                        "api_key": []
                    },
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Find pet by ID.",
                "tags": [
                    "pet"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            },
            "post": {
                "description": "Updates a pet resource based on the form data.",
                "parameters": [
                    {
                        "description": "ID of pet that needs to be updated",
                        "in": "path",
                        "name": "petId",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Name of pet that needs to be updated",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Status of pet that needs to be updated",
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Updates a pet in the store with form data.",
                "tags": [
                    "pet"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pet"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "description": "Upload image of the pet.",
                "parameters": [
                    {
                        "description": "ID of pet to update",
                        "in": "path",
                        "name": "petId",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Additional Metadata",
                        "in": "query",
                        "name": "additionalMetadata",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Uploads an image.",
                "tags": [
                    "pet"
                ],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "format": "binary",
                                "type": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "No file uploaded"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/pet/findByStatus": {
            "get": {
                "description": "Multiple status values can be provided with comma separated strings.",
                "parameters": [
                    {
                        "description": "Status values that need to be considered for filter",
                        "explode": true,
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "default": "available",
                            "enum": [
                                "available",
                                "pending",
                                "sold"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Finds Pets by status.",
                "tags": [
                    "pet"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/pet/findByTags": {
            "get": {
                "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "parameters": [
                    {
                        "description": "Tags to filter by",
                        "explode": true,
                        "in": "query",
                        "name": "tags",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "summary": "Finds Pets by tags.",
                "tags": [
                    "pet"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Pet"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/store/inventory": {
            "get": {
                "description": "Returns a map of status codes to quantities.",
                "security": [
                    {
                        "api_key": []
                    }
                ],
                "summary": "Returns pet inventories by status.",
                "tags": [
                    "store"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "format": "int32",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/store/order": {
            "post": {
                "description": "Place a new order in the store.",
                "summary": "Place an order for a pet.",
                "tags": [
                    "store"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "422": {
                        "description": "Validation exception"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/store/order/{orderId}": {
            "delete": {
                "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.",
                "parameters": [
                    {
                        "description": "ID of the order that needs to be deleted",
                        "in": "path",
                        "name": "orderId",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Delete purchase order by identifier.",
                "tags": [
                    "store"
                ],
                "responses": {
                    "200": {
                        "description": "order deleted"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            },
            "get": {
                "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
                "parameters": [
                    {
                        "description": "ID of order that needs to be fetched",
                        "in": "path",
                        "name": "orderId",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Find purchase order by ID.",
                "tags": [
                    "store"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "example": 10,
                                            "format": "int64",
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "This can only be done by the logged in user.",
                "summary": "Create user.",
                "tags": [
                    "user"
                ],
                "requestBody": {
                    "description": "Created user object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/user/{username}": {
            "delete": {
                "description": "This can only be done by the logged in user.",
                "parameters": [
                    {
                        "description": "The name that needs to be deleted",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete user resource.",
                "tags": [
                    "user"
                ],
                "responses": {
                    "200": {
                        "description": "User deleted"
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            },
            "get": {
                "description": "Get user detail based on username.",
                "parameters": [
                    {
                        "description": "The name that needs to be fetched. Use user1 for testing",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get user by user name.",
                "tags": [
                    "user"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            },
            "put": {
                "description": "This can only be done by the logged in user.",
                "parameters": [
                    {
                        "description": "name that need to be deleted",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Update user resource.",
                "tags": [
                    "user"
                ],
                "requestBody": {
                    "description": "Update an existent user in the store",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "404": {
                        "description": "user not found"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/user/createWithList": {
            "post": {
                "description": "Creates list of users with given input array.",
                "summary": "Creates list of users with given input array.",
                "tags": [
                    "user"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "description": "Log into the system.",
                "parameters": [
                    {
                        "description": "The user name for login",
                        "in": "query",
                        "name": "username",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The password for login in clear text",
                        "in": "query",
                        "name": "password",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Logs user into the system.",
                "tags": [
                    "user"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "headers": {
                            "X-Expires-After": {
                                "description": "date in UTC when token expires",
                                "schema": {
                                    "format": "date-time",
                                    "type": "string"
                                }
                            },
                            "X-Rate-Limit": {
                                "description": "calls per hour allowed by the user",
                                "schema": {
                                    "format": "int32",
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "description": "Log user out of the system.",
                "parameters": [],
                "summary": "Logs out current logged in user session.",
                "tags": [
                    "user"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "Unexpected error"
                    }
                }
            }
        }
    }
}
